name: max-check-15min

on:
  schedule:
    - cron: "*/8 * * * *"
  workflow_dispatch:

# Нужны права на запись, чтобы workflow мог пушить обновлённые secrets/* (если вы хотите использовать GITHUB_TOKEN)
permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-brows-

      - name: Try to download previous state artifact (max-state) - non-fatal
        uses: actions/download-artifact@v5
        with:
          name: max-state
          path: ./artifact
        continue-on-error: true

      - name: Try to download previous last_seen artifact (max-last-seen) - non-fatal
        uses: actions/download-artifact@v5
        with:
          name: max-last-seen
          path: ./artifact_lastseen
        continue-on-error: true

      - name: Decrypt artifacts or repo-stored encrypted files
        env:
          ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}
        run: |
          set -e
          echo "Attempting to decrypt state from downloaded artifact..."
          if [ -f ./artifact/state.enc ]; then
            openssl enc -d -aes-256-cbc -pbkdf2 -in ./artifact/state.enc -out storageState.json -pass pass:"$ENCRYPT_KEY" || true
          elif [ -f ./secrets/state.enc ]; then
            echo "No artifact found — falling back to repo secrets/state.enc"
            openssl enc -d -aes-256-cbc -pbkdf2 -in ./secrets/state.enc -out storageState.json -pass pass:"$ENCRYPT_KEY" || true
          else
            echo "No state.enc found in artifact or repo; continuing without storageState.json"
          fi

          echo "Attempting to decrypt last_seen..."
          if [ -f ./artifact_lastseen/last_seen.enc ]; then
            openssl enc -d -aes-256-cbc -pbkdf2 -in ./artifact_lastseen/last_seen.enc -out last_seen.json -pass pass:"$ENCRYPT_KEY" || true
          elif [ -f ./secrets/last_seen.enc ]; then
            openssl enc -d -aes-256-cbc -pbkdf2 -in ./secrets/last_seen.enc -out last_seen.json -pass pass:"$ENCRYPT_KEY" || true
          else
            echo "No last_seen.enc found in artifact or repo; creating default last_seen.json"
            echo '{ "chats": {} }' > last_seen.json
          fi

      - name: Debug decrypted files
        run: |
          echo "=== Debug decrypted files ==="
          echo "PWD: $(pwd)"
          echo "storageState.json exists: $( [ -f storageState.json ] && echo yes || echo no )"
          echo "last_seen.json exists: $( [ -f last_seen.json ] && echo yes || echo no )"
          echo "ls -la root:"
          ls -la || true
          if [ -f last_seen.json ]; then
            echo "last_seen.json size:" $(wc -c < last_seen.json)
            echo "last_seen keys (jq):"
            cat last_seen.json | jq -c '.chats | keys' || cat last_seen.json | head -n 40
          fi

      - name: Install dependencies (use lockfile if present) and Playwright browsers if needed
        run: |
          set -e
          if [ -f package-lock.json ]; then
            echo "Found package-lock.json -> running npm ci"
            npm ci --no-audit --no-fund
          else
            echo "No package-lock.json -> running npm install"
            npm install --no-audit --no-fund
          fi

          # Install Playwright browsers only if cache miss
          if [ "${{ steps.cache-playwright.outputs.cache-hit }}" != 'true' ]; then
            echo "Playwright browsers cache miss -> installing browsers"
            npx playwright install --with-deps
          else
            echo "Playwright browsers restored from cache"
          fi

      - name: Run checker
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT: ${{ secrets.TG_CHAT }}
        run: |
          node checker.js

      - name: Encrypt storageState.json and last_seen.json (for next run)
        env:
          ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}
        run: |
          set -e
          mkdir -p out
          if [ -f storageState.json ]; then
            openssl enc -aes-256-cbc -pbkdf2 -salt -in storageState.json -out out/state.enc -pass pass:"$ENCRYPT_KEY"
          fi
          if [ -f last_seen.json ]; then
            openssl enc -aes-256-cbc -pbkdf2 -salt -in last_seen.json -out out/last_seen.enc -pass pass:"$ENCRYPT_KEY"
          fi

      - name: Show out/ before upload
        run: |
          echo "Listing out/ directory:"
          ls -la out || true
          if [ -f out/last_seen.enc ]; then
            echo "out/last_seen.enc size:" $(stat -c%s out/last_seen.enc)
          fi
          if [ -f out/state.enc ]; then
            echo "out/state.enc size:" $(stat -c%s out/state.enc)
          fi

      - name: Upload encrypted state artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: max-state
          path: out/state.enc

      - name: Upload encrypted last_seen artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: max-last-seen
          path: out/last_seen.enc

      - name: Commit encrypted state back to repo (secrets/) — copy & push (PAT preferred)
        if: always()
        env:
          REPO_PAT: ${{ secrets.REPO_PAT }}         # optional: Personal Access Token (more reliable for push)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # builtin token
          GITHUB_REPOSITORY: ${{ github.repository }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -e
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

          mkdir -p secrets
          CHANGED=0

          # copy (not move) so upload has the files
          if [ -f out/state.enc ]; then
            cp out/state.enc secrets/state.enc
            git add secrets/state.enc || true
            CHANGED=1
          fi
          if [ -f out/last_seen.enc ]; then
            cp out/last_seen.enc secrets/last_seen.enc
            git add secrets/last_seen.enc || true
            CHANGED=1
          fi

          if [ "$CHANGED" -eq 1 ]; then
            if git diff --cached --quiet; then
              echo "No changes to commit"
            else
              git commit -m "Update encrypted state (last_seen/state) [ci skip]"
              # choose auth method: PAT (if provided) else GITHUB_TOKEN
              if [ -n "$REPO_PAT" ]; then
                echo "Pushing using REPO_PAT"
                git remote set-url origin "https://x-access-token:${REPO_PAT}@github.com/${GITHUB_REPOSITORY}.git"
              else
                echo "Pushing using GITHUB_TOKEN"
                git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
              fi
              git push origin "HEAD:${BRANCH_NAME}" || (echo "Push failed" && exit 0)
              echo "Pushed updated secrets/* to repo (branch: ${BRANCH_NAME})"
            fi
          else
            echo "No out/*.enc files to commit"
          fi
        shell: bash



